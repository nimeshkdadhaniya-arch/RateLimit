@startuml
actor User
participant "HTTP Server\n(Tomcat / Embedded)" as Server
participant "RateLimitFilter\n.doFilterInternal(...)" as Filter
participant "IRateLimitService\n.tryAcquire(...)" as RateLimitService
participant "FilterChain\n.doFilter(...)" as Chain
participant "BoundedRetryQueueService\n.enqueue(...)" as RetryQueue
participant "AsyncContext" as Async

User -> Server: HTTP GET /api/limit?type=...
Server -> Filter: call doFilterInternal(request, response, chain)
activate Filter

Filter -> RateLimitService: tryAcquire(request, response)
activate RateLimitService
RateLimitService --> Filter: boolean acquired
deactivate RateLimitService

alt acquired == true
    Filter -> Chain: chain.doFilter(request, response)
    activate Chain
    Chain --> Filter: request processed (controller -> response)
    deactivate Chain
    Filter --> Server: return 200 OK (Limit OK)
else acquired == false
    Filter -> Filter: request.startAsync() / setTimeout(ASYNC_TIMEOUT_MS)
    Filter -> Async: obtain AsyncContext
    activate Async

    Filter -> RetryQueue: enqueue(new DroppedRequest(request,response,chain,asyncContext))
    activate RetryQueue
    RetryQueue --> Filter: boolean enqueued
    deactivate RetryQueue

    alt enqueued == true
        Filter --> Server: 202 Accepted (accepted for background processing)
    else enqueued == false
        Filter --> Server: 429 Too Many Requests (queue full -> reject)
    end
    deactivate Async
end

deactivate Filter
@enduml